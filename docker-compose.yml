version: "3.8"

# Common airflow settings (using YAML X properties)
# https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html
x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
    args:
      # Specify provider packages
      ADDITIONAL_PYTHON_DEPS: "apache-airflow-providers-postgres==1.0.* apache-airflow-providers-google==3.0.*"
  environment: &airflow-common-env
    # Airflow configuration
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: "cat /run/secrets/sql_alchemy_conn"
    AIRFLOW__CELERY__RESULT_BACKEND_CMD: "cat /run/secrets/result_backend"
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__DEFAULT_TASK_RETRIES: 3
    # Web server SSL configuration
    # https://airflow.apache.org/docs/apache-airflow/stable/security/webserver.html#ssl
    AIRFLOW__WEBSERVER__WEB_SERVER_SSL_CERT: "/run/secrets/ssl_cert"
    AIRFLOW__WEBSERVER__WEB_SERVER_SSL_KEY: "/run/secrets/ssl_key"
    AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 443
    AIRFLOW__WEBSERVER__BASE_URL: "https://airbods.shef.ac.uk:443"
    # Airbods data pipe parameters
    # Google sheet with sensor deployment info
    AIRFLOW_VAR_DATACAKE_WORKSPACE_ID: "0bdfb2eb-6531-4afb-a842-ce6b51d3c980"
    DEPLOYMENTS_SHEET_ID: "1qcWsE0EUED9W9SXPH0ojxTePrHvLQ5ZY0tfGszjXHs4"
    DEPLOYMENTS_TAB_NAME: "Deployments"
  env_file:
    ./secrets/.env
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./tests:/opt/airflow/tests
  user: "50000:50000"
  depends_on:
    redis:
      condition: service_healthy
    backend:
      condition: service_healthy

services:
  # Automated deployment
  # Ansible control node
  ansible:
    build:
      context: .
      dockerfile: ansible/Dockerfile
    environment:
      - ANISBLE_CONFIG:/etc/ansible/ansible.cfg
    volumes:
      - ./ansible:/etc/ansible
      - ./airflow:/home/ansible/airflow
    secrets:
      - source: ssh_key
        mode: 0400
      - connections
      - variables
      - airflow
      - postgres
      - sql_alchemy_conn_localhost

  # Research data storage
  database:
    image: postgres:13.3
    environment:
      POSTGRES_USER: airbods
      POSTGRES_PASSWORD_FILE: /run/secrets/database
      POSTGRES_DB: airbods
    ports:
      - 5432:5432
    secrets:
      - database
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airbods" ]
    restart: always

  # Airflow
  backend:
    image: postgres:13.3
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD_FILE: /run/secrets/backend
      POSTGRES_DB: airflow
    secrets:
      - backend
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
    restart: always

  redis:
    image: redis:6.2
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    restart: always

  webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 443:443
    healthcheck:
      test: [ "CMD", "curl", "--fail", "https://localhost:443/health" ]
    restart: always
    secrets:
      - sql_alchemy_conn
      - result_backend
    user: "50000:0"

  scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    secrets:
      - sql_alchemy_conn
      - result_backend

  worker:
    <<: *airflow-common
    command: celery worker
    secrets:
      - sql_alchemy_conn
      - result_backend
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD_CMD: "cat /run/secrets/airflow"
    secrets:
      - airflow
      - sql_alchemy_conn

  flower:
    image: mher/flower:0.9.7
    command: celery flower
    ports:
      - 5555:5555
    environment:
      CELERY_BROKER_URL: redis://:@redis:6379/0
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]

secrets:
  database:
    file: secrets/database.txt
  backend:
    file: secrets/backend.txt
  result_backend:
    file: secrets/result_backend.txt
  sql_alchemy_conn:
    file: secrets/sql_alchemy_conn.txt
  sql_alchemy_conn_localhost:
    file: secrets/sql_alchemy_conn_localhost.txt
  airflow:
    file: secrets/airflow.txt
  ssl_cert:
    file: secrets/ssl_cert.crt
  ssl_key:
    file: secrets/ssl_key.key
  ssh_key:
    file: secrets/id_rsa
  connections:
    file: secrets/connections.json
  variables:
    file: secrets/variables.json
  postgres:
    file: secrets/postgres.txt
