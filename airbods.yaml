---
# Ansible playbook
# This playbook defines tasks to deploy the application stack
#
# Table of contents:
#  * Install PostgreSQL database
#  * Install Redis database
#  * Install RabbitMQ message broker
#  * Install Apache Airflow

- name: Install PostgreSQL database
  hosts: all
  # This is required because we can't sudo as postgres user
  remote_user: root
  pre_tasks:
    - name: Install postgresql package
      apt:
        name: postgresql-12
    - name: Create Airbods system user
      user:
        name: airbods
        system: yes
    # Python library that will allow us to use Ansible PostgreSQL modules
    # Pre-requisite for Ansible PostgreSQL tasks
    - name: Install psycopg2
      pip:
        name:
          - psycopg2-binary
  tasks:
    - name: Install PostgreSQL auth config
      copy:
        src: pg_hba.conf
        dest: /etc/postgresql/12/main/pg_hba.conf
    - name: Create postgres user
      user:
        name: postgres
        password: "{{ lookup('file', 'secrets/postgres.txt') | password_hash('sha512') }}"
    - name: Install PostgreSQL configuration
      copy:
        src: postgresql.conf
        dest: /etc/postgresql/12/main/postgresql.conf
    # postgresql.conf ssl_cert_file
    - name: Install certificate
      copy:
        src: airbods_shef_ac_uk.cer
        dest: /etc/ssl/certs/airbods_shef_ac_uk.cer
    # postgresql.conf ssl_key_file
    - name: Install certificate key
      copy:
        src: secrets/airbods_shef_ac_uk.key
        dest: /etc/ssl/private/airbods_shef_ac_uk.key
        group: ssl-cert
        mode: 0640
    # postgresql.conf ssl_passphrase_command
    - name: Install SSL key password
      copy:
        content: "{{ lookup('file', 'secrets/database.txt') }}"
        dest: /home/postgres/ssl_key.txt
        owner: postgres
        group: postgres
        mode: 0600
    - name: Create Airbods database user
      become: true
      become_user: postgres
      postgresql_user:
        user: airbods
        password: "{{ lookup('file', 'secrets/database.txt') }}"
        #login_user: postgres
        #login_password: "{{ lookup('file', 'secrets/postgres.txt') }}"
    - name: Create Airbods database
      become: true
      become_user: postgres
      postgresql_db:
        name: airbods
        owner: airbods
    - name: Create Airbods database structure
      become: true
      become_user: airbods
      postgresql_query:
        db: airbods
        query: "{{ lookup('file', item) }}"
        login_user: airbods
        login_password: "{{ lookup('file', 'secrets/database.txt') }}"
      with_fileglob:
        - "database/*.sql"
    - name: Create researcher database role
      become: true
      become_user: postgres
      postgresql_user:
        db: airbods
        user: researcher
        role_attr_flags: NOLOGIN
    - name: Set researcher permissions
      become: true
      become_user: postgres
      postgresql_privs:
        role: researcher
        db: airbods
        schema: public
        privs: SELECT
        type: table
        objs: ALL_IN_SCHEMA
  handlers:
    - name: Restart PostgreSQL service
      service:
        name: postgresql
        state: restarted

- name: Install Redis database
  hosts: all
  become: yes
  tasks:
    - name: Install Redis package
      apt:
        name: redis
  handlers:
    - name: Restart Redis service
      service:
        name: redis
        state: restarted

# Why You Should use Celery with RabbitMQ
# https://www.section.io/engineering-education/why-you-should-use-celery-with-rabbitmq/
- name: Install RabbitMQ message broker
  hosts: all
  become: yes
  tasks:
    - name: Install RabbitMQ package
      apt:
        name: rabbitmq-server
    - name: Start RabbitMQ service
      systemd:
        name: rabbitmq-server
        state: started
    - name: Enable RabbitMQ management console
      shell: rabbitmq-plugins enable rabbitmq_management
    - name: Create RabbitMQ vhost
      rabbitmq_vhost:
        name: airflow
    # This task seems to be problematic with older versions of Ansible
    # https://github.com/ansible-collections/community.rabbitmq/issues/52
    - name: Create RabbitMQ user
      rabbitmq_user:
        user: airflow
        password: fWfkEq4C
        permissions:
          - vhost: airflow
            read_priv: .*
            write_priv: .*
            configure_priv: .*
    - name: Delete RabbitMQ guest user
      rabbitmq_user:
        user: guest
        state: absent
  handlers:
    - name: Restart RabbitMQ service
      systemd:
        name: rabbitmq-server
        state: restarted

# https://airflow.apache.org/docs/apache-airflow/stable/installation.html
- name: Install Apache Airflow
  hosts: all
  remote_user: root
  pre_tasks:
    - name: Create airflow system user
      user:
        name: airflow
        password: "{{ lookup('file', 'secrets/airflow.txt') | password_hash('sha512') }}"
        system: yes
    - name: Create Airflow group
      group:
        name: airflow
    - name: Install Airflow prerequisites
      apt:
        name:
          - freetds-bin
          - krb5-user
          - ldap-utils
          - libsasl2-2
          - libsasl2-modules
          - libssl1.1
          - locales
          - lsb-release
          - sasl2-bin
          - sqlite3
          - unixodbc
          - python3-pip
    - name: Install virtualenv
      pip:
        name: virtualenv
    - name: Install Airflow packages
      pip:
        name:
          - apache-airflow[celery,redis]==2.1.*
          - apache-airflow-providers-postgres==1.0.*
          - apache-airflow-providers-google==3.0.*
          - apache-airflow-providers-http==2.0.*
        virtualenv: /opt/airflow
  tasks:
    - name: Install systemd services
      template:
        src: airflow.service.j2
        dest: "/etc/systemd/system/airflow-{{ item }}.service"
      loop: "{{ service }}"
    - name: Install Airflow configuration
      copy:
        src: airflow.cfg
        dest: /home/airflow/airflow/airflow.cfg
        owner: airflow
    - name: Secure secrets dir
      file:
        path: "{{ secrets_dir }}"
        state: directory
        mode: '0500'
        owner: airflow
        group: airflow
    - name: Install connection string
      copy:
        src: secrets/sql_alchemy_conn_localhost.txt
        dest: "{{ secrets_dir }}/sql_alchemy_conn_localhost.txt"
        owner: airflow
        group: airflow
        mode: 0400
    - name: Install Airflow connections
      copy:
        src: secrets/connections.json
        dest: "{{ secrets_dir }}/connections.json"
        owner: airflow
        group: airflow
        mode: 0400
    - name: Install Airflow variables
      copy:
        src: secrets/variables.json
        dest: "{{ secrets_dir }}/variables.json"
        group: airflow
        owner: airflow
        mode: '0400'
    - name: Create airflow database user
      become: true
      become_user: postgres
      postgresql_user:
        user: airflow
        password: "{{ lookup('file', 'secrets/airflow.txt') }}"
    - name: Create airflow database
      become: true
      become_user: postgres
      postgresql_db:
        name: airflow
        owner: airflow
    - name: Start Airflow services
      systemd:
        name: "airflow-{{ item }}"
        state: started
        daemon_reload: true
      loop: "{{ service }}"
    - name: Initialise Airflow database
      become: yes
      become_user: airflow
      # "initdb is also idempotent, so this can be run as often as you
      # choose to, without needing to worry about the database changing."
      # https://stackoverflow.com/a/59560731
      shell: "{{ airflow_bin_path }}/airflow db init"
    - name: Create Airflow admin user
      # Don't show password
      #no_log: true
      command:
        argv:
          - "{{ airflow_bin_path }}/airflow"
          - "users"
          - "create"
          - "--username"
          - "airflow"
          - "--password"
          - "{{ lookup('file', 'secrets/airflow.txt') }}"
          - "--firstname"
          - "admin"
          - "--lastname"
          - "user"
          - "--role"
          - "Admin"
          - "--email"
          - "airbods@sheffield.ac.uk"
    - name: Install Airflow content
      copy:
        src: "{{ item }}"
        dest: "{{ airflow_home }}"
        owner: airflow
        group: airflow
      loop:
        - airflow/dags
        - airflow/plugins
        - airflow/tests
        - airflow/variables.json
    - name: Import variables
      become: yes
      become_user: airflow
      shell: "{{ airflow_bin_path }}/airflow variables import {{ airflow_home }}/variables.json"
      tags:
        - dev
  handlers:
    - name: Restart Airflow services
      systemd:
        name: "airflow-{{ item }}"
        state: restarted
        daemon_reload: true
      loop: "{{ service }}"
...
