---
# Airbods deployment script
# Ansible playbook
# This playbook defines tasks to deploy the application stack.
# It installs several services and configures them.
#
# Table of contents:
#  * Install PostgreSQL database
#  * Install Redis database
#  * Install RabbitMQ message broker
#  * Install Apache Airflow

- name: Install miscellaneous packages
  hosts: all
  become: yes
  pre_tasks:
    - name: Install utilities
      apt:
        update_cache: yes
        name:
          - wget
          - curl
          - ca-certificates

- name: Install PostgreSQL database
  hosts: all
  become: yes
  pre_tasks:
    - name: Install postgresql package
      apt:
        name:
          - postgresql-12
          - python3-pip
    - name: Create Airbods system user
      user:
        name: airbods
        system: yes
    # Python library that will allow us to use Ansible PostgreSQL modules
    # Pre-requisite for Ansible PostgreSQL tasks
    - name: Install psycopg2
      pip:
        name:
          - psycopg2-binary
  tasks:
    - name: Install PostgreSQL auth config
      copy:
        src: pg_hba.conf
        dest: /etc/postgresql/12/main/pg_hba.conf
      notify:
        - Restart PostgreSQL
    - name: Create postgres user
      user:
        name: postgres
        password: "{{ lookup('file', 'secrets/postgres.txt') | password_hash('sha512') }}"
    - name: Install PostgreSQL configuration
      copy:
        src: postgresql.conf
        dest: /etc/postgresql/12/main/postgresql.conf
      notify:
        - Restart PostgreSQL
    # postgresql.conf ssl_cert_file
    - name: Install certificate
      copy:
        src: airbods_shef_ac_uk_cert.cer
        dest: /var/lib/postgresql/12/main/server.crt
        owner: postgres
        group: postgres
    # postgresql.conf ssl_key_file
    - name: Install private key
      copy:
        src: secrets/airbods_shef_ac_uk.key
        dest: /var/lib/postgresql/12/main/server.key
        owner: postgres
        group: postgres
        mode: 0600
    - name: Create postgres home directory
      file:
        path: /home/postgres
        state: directory
        owner: postgres
        group: postgres
        mode: 0755
    # postgresql.conf ssl_passphrase_command
    - name: Install SSL key password
      copy:
        content: "{{ lookup('file', 'secrets/database.txt') }}"
        dest: /home/postgres/ssl_key.txt
        owner: postgres
        group: postgres
        mode: 0600
    - name: Start PostgreSQL service
      service:
        name: postgresql
        state: started
    - name: Create Airbods database user
      become_user: postgres
      postgresql_user:
        user: airbods
        password: "{{ lookup('file', 'secrets/database.txt') }}"
        # If this doesn't work, run:
        # sudo -u postgres psql -c "\password airbods"
    - name: Create Airbods database
      become_user: postgres
      postgresql_db:
        name: airbods
        owner: airbods
    - name: Create Airbods database structure
      become_user: airbods
      postgresql_query:
        db: airbods
        query: "{{ lookup('file', item) }}"
        login_user: airbods
        login_password: "{{ lookup('file', 'secrets/database.txt') }}"
      with_fileglob:
        - "database/*.sql"
    - name: Create researcher database role
      become_user: postgres
      postgresql_user:
        db: airbods
        user: researcher
        role_attr_flags: NOLOGIN
    - name: Set researcher permissions
      become_user: postgres
      postgresql_privs:
        role: researcher
        db: airbods
        schema: public
        privs: SELECT
        type: table
        objs: ALL_IN_SCHEMA
  handlers:
    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted

- name: Install Redis database
  hosts: all
  become: yes
  tasks:
    - name: Install Redis package
      apt:
        name: redis
  handlers:
    - name: Restart Redis service
      service:
        name: redis
        state: restarted

# Why You Should use Celery with RabbitMQ
# https://www.section.io/engineering-education/why-you-should-use-celery-with-rabbitmq/
- name: Install RabbitMQ message broker
  hosts: all
  become: yes
  tasks:
    - name: Install RabbitMQ package
      apt:
        name: rabbitmq-server=3.*
    # https://stackoverflow.com/a/45475646
    - name: RabbitMQ set HOSTNAME
      lineinfile:
        path: /etc/rabbitmq/rabbitmq-env.conf
        regexp: '^HOSTNAME='
        line: HOSTNAME=localhost
      notify:
        - Restart RabbitMQ
    - name: Start RabbitMQ service
      systemd:
        name: rabbitmq-server
        state: started
    - name: Enable RabbitMQ management console
      shell:
        cmd: "rabbitmq-plugins enable rabbitmq_management"
    - name: Create RabbitMQ vhost
      rabbitmq_vhost:
        # This is required to fix the error "unable to connect to epmd (port
        # 4369) on airbods: timeout (timed out)" that occurs when the default
        # value is used.
        node: rabbit@localhost
        name: airflow
    # This task seems to be problematic with older versions of Ansible
    # https://github.com/ansible-collections/community.rabbitmq/issues/52
    - name: Create RabbitMQ user
      rabbitmq_user:
        # This is required to avoid the error "Could not determine the
        # version of the RabbitMQ server."
        node: rabbit@localhost
        user: airflow
        password: "{{ lookup('file', 'secrets/rabbitmq.txt') }}"
        permissions:
          - vhost: airflow
            read_priv: .*
            write_priv: .*
            configure_priv: .*
    - name: Create RabbitMQ management user
      rabbitmq_user:
        node: rabbit@localhost
        user: admin
        password: "{{ lookup('file', 'secrets/rabbitmq_admin.txt') }}"
        tags: administrator
        # assign full access control
        permissions:
          - vhost: /
            configure_priv: .*
            read_priv: .*
            write_priv: .*
    - name: Delete RabbitMQ guest user
      rabbitmq_user:
        node: rabbit@localhost
        user: guest
        state: absent
  handlers:
    - name: Restart RabbitMQ
      systemd:
        name: rabbitmq-server
        state: restarted

# https://airflow.apache.org/docs/apache-airflow/stable/installation.html
- name: Install Apache Airflow
  hosts: all
  become: yes
  pre_tasks:
    - name: Create airflow system user
      user:
        name: airflow
        password: "{{ lookup('file', 'secrets/airflow.txt') | password_hash('sha512') }}"
        system: yes
        create_home: yes
    - name: Ensure Airflow dir exists
      file:
        state: directory
        path: /home/airflow/airflow
        owner: airflow
        group: airflow
        mode: 0750
    - name: Create Airflow group
      group:
        name: airflow
    - name: Install Airflow prerequisites
      apt:
        name:
          - freetds-bin
          - krb5-user
          - ldap-utils
          - libsasl2-2
          - libsasl2-modules
          - libssl1.1
          - locales
          - lsb-release
          - sasl2-bin
          - sqlite3
          - unixodbc
          - python3-pip
    - name: Install virtualenv
      pip:
        name: virtualenv
    - name: Install Airflow packages
      pip:
        name:
          - apache-airflow[celery,redis]==2.1.*
          - apache-airflow-providers-postgres==1.0.*
          - apache-airflow-providers-google==3.0.*
          - apache-airflow-providers-http==2.0.*
        virtualenv: /opt/airflow
  tasks:
    - name: Install systemd services
      template:
        src: airflow.service.j2
        dest: "/etc/systemd/system/airflow-{{ item }}.service"
      loop: "{{ service }}"
    - name: Install Airflow configuration
      copy:
        src: airflow.cfg
        dest: /home/airflow/airflow/airflow.cfg
        owner: airflow
        group: airflow
      notify:
        - Restart Airflow services
    - name: Secure secrets dir
      file:
        path: "{{ secrets_dir }}"
        state: directory
        mode: 0500
        owner: airflow
        group: airflow
    - name: Install Airflow secrets
      copy:
        src: "{{ item }}"
        dest: "{{ secrets_dir }}"
        owner: airflow
        group: airflow
        mode: 0400
      with_items:
        # Airflow webserver encryption
        # https://airflow.apache.org/docs/apache-airflow/stable/security/webserver.html#ssl
        - secrets/webserver_key.pem
        - secrets/webserver.pem
        - secrets/sql_alchemy_conn_localhost.txt
        - secrets/connections.json
        - secrets/variables.json
        - secrets/rabbitmq_url.txt
    - name: Create airflow database user
      become_user: postgres
      postgresql_user:
        user: airflow
        password: "{{ lookup('file', 'secrets/airflow.txt') }}"
    - name: Create airflow database
      become_user: postgres
      postgresql_db:
        name: airflow
        owner: airflow
    # https://man7.org/linux/man-pages/man7/capabilities.7.html
    # https://superuser.com/a/892391
    - name: Allow Airflow to listen on privileged ports
      shell:
        # Set file capabilities "Effective, Inheritable and Permitted" for the
        # Python interpreter used to run Airflow.
        # https://linux.die.net/man/8/setcap
        # You can check this using `getcap /usr/bin/python3.8`
        cmd: "setcap cap_net_bind_service=+eip /usr/bin/python3.8"
    - name: Start Airflow services
      systemd:
        name: "airflow-{{ item }}"
        state: started
        daemon_reload: true
      loop: "{{ service }}"
    - name: Initialise Airflow database
      become_user: airflow
      # "initdb is also idempotent, so this can be run as often as you
      # choose to, without needing to worry about the database changing."
      # https://stackoverflow.com/a/59560731
      shell: "{{ airflow_bin_path }}/airflow db init"
    - name: Create Airflow admin user
      # Don't show password
      no_log: true
      become_user: airflow
      command:
        argv:
          - "{{ airflow_bin_path }}/airflow"
          - "users"
          - "create"
          - "--username"
          - "airflow"
          - "--password"
          - "{{ lookup('file', 'secrets/airflow.txt') }}"
          - "--firstname"
          - "admin"
          - "--lastname"
          - "user"
          - "--role"
          - "Admin"
          - "--email"
          - "airbods@sheffield.ac.uk"
    - name: Install Airflow content
      copy:
        src: "{{ item }}"
        dest: "{{ airflow_home }}"
        owner: airflow
        group: airflow
      loop:
        - airflow/dags
        - airflow/plugins
        - airflow/tests
        - airflow/variables.json
      notify:
        - Restart Airflow services
    - name: Import variables
      become_user: airflow
      shell: "{{ airflow_bin_path }}/airflow variables import {{ airflow_home }}/variables.json"
      tags:
        - dev
  handlers:
    - name: Restart Airflow services
      systemd:
        name: "airflow-{{ item }}"
        state: restarted
        daemon_reload: true
      loop: "{{ service }}"

- name: Install pgAdmin
  # pgAdmin docs
  # https://www.pgadmin.org/docs/pgadmin4/latest
  hosts: all
  become: yes
  tasks:
    # pgAdmin 4 (APT) download and installation instructions
    # https://www.pgadmin.org/download/pgadmin-4-apt/
    - name: Install pgAdmin APT public key
      apt_key:
        url: "https://www.pgadmin.org/static/packages_pgadmin_org.pub"
    - name: Install pgAdmin APT respository
      apt_repository:
        # Use lsb_release -cs to get the Ubuntu version
        repo: "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/focal pgadmin4 main"
    - name: Install pgAdmin
      apt:
        update_cache: yes
        name:
          # Server mode (web app)
          - pgadmin4-web
    # This script will install Apache HTTPD web server
    - name: Configure pgAdmin webserver
      # Run in silent mode
      # https://postgrespro.com/list/thread-id/2530260
      shell:
        cmd: "/usr/pgadmin4/bin/setup-web.sh --yes"
      environment:
        PGADMIN_PLATFORM_TYPE: debian
        PGADMIN_SETUP_PASSWORD: "{{ lookup('file', 'secrets/pgadmin.txt') }}"
        PGADMIN_SETUP_EMAIL: j.heffer@sheffield.ac.uk
    - name: Delete Apache2 Default Page
      file:
        state: absent
        path: /var/www/html/index.html
    - name: Blank Apache2 Default Page
      file:
        state: touch
        path: /var/www/html/index.html
    - name: Remove Apache2 default site
      file:
        path: /etc/apache2/sites-enabled/000-default.conf
        state: absent
      notify:
        - Restart Apache
    # HTTPS Configuration
    # https://ubuntu.com/server/docs/web-servers-apache
    - name: Install SSL certificate
      copy:
        src: airbods_shef_ac_uk_cert.cer
        dest: /etc/ssl/certs/airbods_shef_ac_uk_cert.cer
    - name: Install SSL private key
      copy:
        src: secrets/airbods_shef_ac_uk.key
        dest: /etc/ssl/private/airbods_shef_ac_uk.key
        mode: 0600
    - name: Enable mod_ssl module
      shell: "a2enmod ssl"
    - name: Configure Apache2 for HTTPS
      shell: "a2ensite default-ssl"
      notify:
        - Restart Apache
    - name: Disable default SSL config
      file:
        state: absent
        path: /etc/apache2/sites-enabled/default-ssl.conf
    - name: Install Apache config
      copy:
        src: airbods.conf
        dest: /etc/apache2/sites-available/airbods.conf
    - name: Enable Apache config
      file:
        # Create symlink
        path: /etc/apache2/sites-enabled/airbods.conf
        state: link
        src: /etc/apache2/sites-available/airbods.conf
      notify:
        - Restart Apache
  handlers:
    - name: Restart Apache
      systemd:
        name: apache2
        state: restarted
...
